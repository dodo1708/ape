#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import stat
from subprocess import call
from os.path import join as pj


def mkdir(dirname):
    print('*** mkdir', dirname)
    os.mkdir(dirname)


def _get_bin_dir(venv_dir):
    subdir = 'Scripts' if os.name == 'nt' else 'bin'
    return pj(venv_dir, subdir)


class VirtualEnv(object):

    def __init__(self, venv_dir):
        self.bin_dir = _get_bin_dir(venv_dir)

    def call_bin(self, script_name, args):
        call([pj(self.bin_dir, script_name)] + list(args))

    def pip(self, *args):
        self.call_bin('pip', list(args))

    def python(self, *args):
        self.call_bin('python', args)

    def python_oneliner(self, snippet):
        self.python('-c', snippet)


def main(args):

    use_ape_version = 'PYPI'
    venv_mechanism = 'VIRTUALENV' if sys.version_info < (3, 0) else 'VENVMODULE'

    if '--dev' in args:
        use_ape_version = 'GITMASTER'
        args.remove('--dev')
    elif '--local' in args:
        use_ape_version = 'LOCALCHECKOUT'
        args.remove('--local')

    if '--use-virtualenv' in args:
        args.remove('--use-virtualenv')
    elif '--use-venv-module' in args:
        args.remove('--use-venv-module')
        venv_mechanism = 'VENVMODULE'
        if sys.version_info < (3, 5):
            print('--use-venv-module requires at least python 3.5')
            print('aborted')
            sys.exit(1)

    if len(args) != 2:
        print('''Usage:

        bootstrape [--dev|--local] [--use-virtualenv|--use-venv-module] <APE_ROOT_DIR>

        Creates an ape-root at APE_ROOT_DIR for your product lines.
        The given directory must not exist already.

        If --dev is specified, this installs the latest master from git.

        If --local is specified, this will use your local checkout of ape.
            The local checkout is infered by looking
            at the location of the bootstrape script.

        By default, the latest stable version of ape is used from PYPI.

        If --use-virtualenv is specified, the virtualenv will be created
        by calling the "virtualenv" binary.

        If --use-venv-module is specified, the virtualenv will be created
        by using "python -m venv" (needs python3).

        By default, the "virtualenv" binary is used on python2
        and the venv module is used on python3.
        ''')
        sys.exit(1)

    ape_root_dir = os.path.abspath(args[1])

    if os.path.exists(ape_root_dir):
        print('ape root dir already exists: ', ape_root_dir)
        print('aborted')
        sys.exit(1)

    if not os.path.isdir(os.path.dirname(ape_root_dir)):
        print('parent directory not found: ', os.path.dirname(ape_root_dir))
        print('aborted')
        sys.exit(1)

    print('### bootstrapping new ape root at: %s' % ape_root_dir)

    mkdir(ape_root_dir)
    _ape_dir = pj(ape_root_dir, '_ape')
    mkdir(_ape_dir)

    venv_dir = pj(_ape_dir, 'venv')
    print('*** creating virtualenv ', venv_dir)
    if venv_mechanism == 'VIRTUALENV':
        try:
            call(['virtualenv', venv_dir, '--no-site-packages'])
        except OSError:
            print('You probably dont have virtualenv installed: sudo apt-get install python-virtualenv')
            print('aborted')
            sys.exit(1)
    elif venv_mechanism == 'VENVMODULE':
        call([sys.executable or 'python', '-m', 'venv', venv_dir])

    venv = VirtualEnv(venv_dir)

    if use_ape_version == 'GITMASTER':
        print('*** installing ape into virtualenv (latest git master)')
        print()
        venv.pip('install', '-e', 'git+https://github.com/henzk/ape.git#egg=ape')
    elif use_ape_version == 'PYPI':
        print('*** installing ape into virtualenv (latest from PYPI)')
        print()
        venv.pip('install', 'ape')
    elif use_ape_version == 'LOCALCHECKOUT':
        print('*** installing ape into virtualenv (using local checkout)')
        print()
        package_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        venv.pip('install', '-e', package_dir)
    print()

    print('*** creating _ape/activape and aperun scripts')
    # get the activape_template from inside the ape package installed in venv
    activape_dst = pj(_ape_dir, 'activape')
    venv.python_oneliner(
        'import os, shutil, pkg_resources;'
        'shutil.copyfile(os.path.abspath('
        'pkg_resources.resource_filename('
        '"ape", "resources/activape_template"'
        ')), "%s")' % activape_dst.replace('\\', '/')
    )

    aperun_dst = pj(_ape_dir, 'aperun')
    venv.python_oneliner(
        'import os, shutil, pkg_resources;'
        'shutil.copyfile(os.path.abspath('
        'pkg_resources.resource_filename('
        '"ape", "resources/aperun_template"'
        ')), "%s")' % aperun_dst.replace('\\', '/')
    )

    st = os.stat(aperun_dst)
    os.chmod(aperun_dst, st.st_mode | stat.S_IEXEC)

    if not os.path.isfile(activape_dst):
        print('!!Error creating activape script!!')
        print('aborted')
        sys.exit(1)

    if not os.path.isfile(aperun_dst):
        print('!!Error creating aperun script!!')
        print('aborted')
        sys.exit(1)

    print('*** ape container mode setup complete')


if __name__ == '__main__':
    main(sys.argv)
